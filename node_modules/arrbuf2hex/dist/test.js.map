{"version":3,"file":"test.js","sourceRoot":"","sources":["../src/test.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,6CAAsC;IACtC,+BAA8B;IAC9B,SAAS,IAAI,CAAC,IAA0B,EAAE,GAAW,EAAE,IAAsD,EAAE,cAAkC,KAAK,CAAC,EAAE,OAA2B,KAAK,CAAC,EAAE,QAA6B,KAAK,CAAC;QAC9N,MAAM,EAAE,GAAG,oBAAO,CAAC,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,KAAK,CAAC,CAAA;QAClD,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;QACrB,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAA;QAC7B,OAAO,CAAC,GAAG,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,MAAM,cAAO,CAAC,EAAC,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,EAAC,EAAE,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,EAAE,CAAC,CAAA;IACrI,CAAC;IACD,IAAI,CACH,GAAG,CAAC,EAAE,CAAC,QAAQ,KAAK,OAAO,GAAG,EAC9B,4DAA4D,EAC5D,IAAI,UAAU,CAAC,CAAC,CAAC,CACjB,CAAA;IACD,IAAI,CACH,GAAG,CAAC,EAAE,CAAC,QAAQ,KAAK,OAAO,GAAG,EAC9B,4DAA4D,EAC5D,IAAI,UAAU,CAAC,CAAC,CAAC,CACjB,CAAA;IACD,IAAI,CACH,GAAG,CAAC,EAAE,CAAC,OAAO,KAAK,GAAG,EACtB,+DAA+D,EAC/D,UAAU,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CACzB,CAAA;IACD,IAAI,CACH,GAAG,CAAC,EAAE,CAAC,OAAO,KAAK,GAAG,EACtB,8DAA8D,EAC9D,UAAU,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAC5B,CAAA;IACD,IAAI,CACH,GAAG,CAAC,EAAE,CAAC,OAAO,KAAK,GAAG,EACtB,2CAA2C,EAC3C,UAAU,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAC/B,CAAA;IACD,IAAI,CACH,GAAG,CAAC,EAAE,CAAC,KAAK,KAAK,GAAG,EACpB,4CAA4C,EAC5C,UAAU,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAC/B,CAAA;IACD,IAAI,CACH,GAAG,CAAC,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,EAC9B,0CAA0C,EAC1C,UAAU,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAC5B,CAAA;IACD,IAAI,CACH,GAAG,CAAC,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,EAC9B,kDAAkD,EAClD,UAAU,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,IAAI,CACnE,CAAA;IAED,IAAI,CACH,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,KAAK,CAAC,EACvB,4CAA4C,EAC5C,IAAI,iBAAiB,CAAC,CAAC,CAAC,CACxB,CAAA","sourcesContent":["import { buf2hex } from './arrbuf2hex'\nimport { inspect } from 'util'\nfunction test(pass: (ts: any) => boolean, msg: string, abuf:ArrayBufferView | ArrayBuffer | SharedArrayBuffer, octetOffset: number | undefined = void 0, hLen: number | undefined = void 0, upper: boolean | undefined = void 0) {\n\tconst ts = buf2hex(abuf, octetOffset, hLen, upper)\n\tconsole.count('Test')\n\tconsole.assert(pass(ts), msg)\n\tconsole.log(`  ${msg} ${pass(ts) ? '\\u2705' : '\\u274C'} \\n${inspect({abuf, octetOffset, hLen, upper, result: ts}, {colors: true})}`)\n}\ntest(\n\tstr => 'string' === typeof str,\n\t'arrbuf2hex returns strings given a TypedArray (Uint8Array)',\n\tnew Uint8Array(3)\n)\ntest(\n\tstr => 'string' === typeof str,\n\t'arrbuf2hex returns strings given a TypedArray (Int32Array)',\n\tnew Int32Array(3)\n)\ntest(\n\tstr => '10203' === str,\n\t'arrbuf2hex concats the first octet when when octetOffset is 1',\n\tUint8Array.of(1, 2, 3), 1\n)\ntest(\n\tstr => '01020' === str,\n\t'arrbuf2hex concats the last octet when hLen is an odd number',\n\tUint8Array.of(1, 2, 3), 0, 5\n)\ntest(\n\tstr => '10203' === str,\n\t'arrbuf2hex concats to octets within range',\n\tUint8Array.of(1, 2, 3, 4), 1, 5\n)\ntest(\n\tstr => '020' === str,\n\t'arrbuf2hex concats exactly to within range',\n\tUint8Array.of(1, 2, 3, 4), 2, 3\n)\ntest(\n\tstr => /^[0-9a-f]+$/.test(str),\n\t'arrbuf2hex produces lowercase by default',\n\tUint8Array.of(9, 10, 11, 12)\n)\ntest(\n\tstr => /^[0-9A-F]+$/.test(str),\n\t'arrbuf2hex produces uppercase when set specified',\n\tUint8Array.of(9, 10, 11, 12, 13, 14, 15, 16, 240, 255), 0, 20, true\n)\n\ntest(\n\tstr => str.length === 6,\n\t'arrbuf2hex works with shared array buffers',\n\tnew SharedArrayBuffer(3)\n)\n"]}