{"version":3,"file":"arrbuf2hex.js","sourceRoot":"","sources":["../src/arrbuf2hex.ts"],"names":[],"mappings":";;;;;;;;;;;IAAA,MAAM,CAAC,GAAc,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA;IA+CjG,cAAC;IA9CL,MAAM,CAAC,GAAc,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;IA8CjG,cAAC;IA7CF,QAAQ,CAAC,CAAC,aAAa,CACtB,MAAuC,EACvC,cAAsB,CAAC,EACvB,OAAe,CAAC,MAAM,CAAC,UAAU,GAAG,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAC1D,QAAiB,KAAK;QAEtB,MAAM,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACxB,EAAE,GAAG,IAAI,UAAU,CAClB,MAAM,EACN,WAAW,KAAK,CAAC,EACjB,IAAI,GAAG,CAAC,GAAG,WAAW,GAAG,CAAC;YAC1B,CAAC,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC;YAChB,CAAC,CAAC,IAAI,KAAK,CAAC,CACZ,CAAA;QACF,KAAK,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,GAAG,IAAI,EAAE,CAAC,EAAE;YAAE,MAAM,GAAG,CAChE,CAAC,GAAG,CAAC;gBACL,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE;gBAClB,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CASnB,CAAA;IACF,CAAC;IAmBA,sCAAa;IACI,mCAAU;IAlB5B,MAAM,UAAU,GAAG,CAClB,GAAsD,EACtD,cAAkC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAClF,OAA2B,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EACnE,QAA6B,KAAK,EAC1B,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,aAAa,CAC/C,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,EAC1C,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC;QACvB,CAAC,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,CAAC;QACpC,CAAC,CAAC,WAAW,EACb,IAAI,EACJ,KAAK,CACL,CAAC,CAAA;IAOD,gCAAU;IACI,6BAAO;IACP,6BAAO;IAPtB,kBAAe,UAAU,CAAA","sourcesContent":["const h:Uint8Array = Uint8Array.of(48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102) // 16 long Uint8Array\nconst H:Uint8Array = Uint8Array.of(48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70) // same in lowercase\nfunction* arrbufchargen (\n\tarrbuf: ArrayBuffer | SharedArrayBuffer,\n\toctetOffset: number = 0,\n\thLen: number = (arrbuf.byteLength - (octetOffset / 2)) * 2,\n\tupper: boolean = false\n): IterableIterator<number> {\n\tconst hex = upper ? H : h,\n\t\tbv = new Uint8Array(\n\t\t\tarrbuf,\n\t\t\toctetOffset >>> 1,\n\t\t\thLen & 1 | octetOffset & 1\n\t\t\t? hLen + 1 >>> 1\n\t\t\t: hLen >>> 1\n\t\t)\n\tfor (let i = (octetOffset & 1), j = 0; j++ < hLen; i++) yield hex[\n\t\ti & 1\n\t\t? bv[i >>> 1] & 15\n\t\t: bv[i >>> 1] >>> 4\n\t\t// ? (\n\t\t// \tconsole.log({v: bv[i >>> 1] & 15, i, j, bv}),\n\t\t// \tbv[i >>> 1] & 15\n\t\t// )\n\t\t// : (\n\t\t// \tconsole.log({v: bv[i >>> 1] >>> 4, i, j, bv}),\n\t\t// \tbv[i >>> 1] >>> 4\n\t\t// )\n\t]\n}\n\nconst arrbuf2hex = (\n\tarr: ArrayBufferView | ArrayBuffer | SharedArrayBuffer,\n\toctetOffset: number | undefined = ArrayBuffer.isView(arr) ? arr.byteOffset * 2 : 0,\n\thLen: number | undefined = (arr.byteLength - (octetOffset / 2)) * 2,\n\tupper: boolean | undefined = false\n):string => String.fromCharCode(...arrbufchargen(\n\tArrayBuffer.isView(arr) ? arr.buffer : arr,\n\tArrayBuffer.isView(arr)\n\t? octetOffset + (arr.byteOffset * 2)\n\t: octetOffset,\n\thLen,\n\tupper\n))\n\nexport default arrbuf2hex\nexport {\n\tH, h,\n\tarrbufchargen,\n\tarrbufchargen as arrbufIter,\n\tarrbuf2hex,\n\tarrbuf2hex as arr2hex,\n\tarrbuf2hex as buf2hex\n}\n\n"]}